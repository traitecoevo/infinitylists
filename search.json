[{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"which-records-are-returned","dir":"Articles","previous_headings":"","what":"Which records are returned?","title":"infinitylists","text":"map table outputs display recent record per species per voucher type. species therefore represented map table maximum 3 records (species physical voucher, photographic voucher audio voucher target area). text statement indicates total number records, downloadable CSV file contains records target area, just recent records.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"use-the-app","dir":"Articles","previous_headings":"","what":"Use the app","title":"infinitylists","text":"app can accessed : https://unsw.shinyapps.io/infinitylists/","code":""},{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"local-installation","dir":"Articles","previous_headings":"","what":"Local installation","title":"infinitylists","text":"can install run local version infinitylists GitHub. allows flexibility loading taxa automatically loaded web app. code :","code":"# install.packages(\"remotes\")  remotes::install_github(\"traitecoevo/infinitylists\", build_vignettes = TRUE)  library(infinitylists)  infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"adding-new-taxa","dir":"Articles","previous_headings":"","what":"Adding new taxa","title":"infinitylists","text":"infinitylists comes 5 taxa loaded start : plants, butterflies, cicadas, marsupials, dragonflies + damselflies. want add another taxon, ’ll need download data first via galah interface ALA. function download_ala_obs download data put directory infinitylists can find . value taxon needs valid taxonomic group recognized ALA. download step fast taxa small number observations ALA slower taxa millions observations.","code":"# install.packages(\"galah\")  # register with ALA galah::galah_config(email = \"YOUR EMAIL HERE\")  # download the data, this needs to be a valid taxa name download_ala_obs(taxon = \"Orthoptera\")  infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"adapt-infinitylists-for-other-countries","dir":"Articles","previous_headings":"","what":"Adapt infinitylists for other countries","title":"infinitylists","text":"developed functions assist users create infinitylist chosen taxa country. Check vignette shows !","code":"vignette(\"diy\")"},{"path":"https://traitecoevo.github.io/infinitylists/articles/infinitylists.html","id":"why-did-i-get-disconnected-from-the-server","dir":"Articles","previous_headings":"","what":"Why did I get disconnected from the server?","title":"infinitylists","text":"infinitylists left open idle browser long, disconnected server. Applying Use location filter without first given browser access current location also disconnect server. occurs, please amend settings try .","code":""},{"path":"https://traitecoevo.github.io/infinitylists/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Mesaglio. Author, maintainer, copyright holder. Cornwell. Author. Fonti Kar. Author.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mesaglio T, Cornwell W, Kar F (2025). infinitylists: Shiny-Based Application Generating Place-Based Species Lists Australian Plants. R package version 1.0.0, https://traitecoevo.github.io/infinitylists/.","code":"@Manual{,   title = {infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants},   author = {Thomas Mesaglio and Will Cornwell and Fonti Kar},   year = {2025},   note = {R package version 1.0.0},   url = {https://traitecoevo.github.io/infinitylists/}, }"},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"infinitylists-","dir":"","previous_headings":"","what":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"Shiny-based application allows users extract species occurrence data national global databases generate species list defined area. records associated either physical voucher (stored herbaria museums), photographic voucher audio file uploaded iNaturalist extracted. species within defined area, application return voucher type, number vouchers, date recent voucher, spatial coordinates, voucher location, voucher collector. Records displayed table map, downloadable CSV. pre-loaded data downloaded time listed releases section github, user can also download --date date following code .","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"which-records-are-returned","dir":"","previous_headings":"","what":"Which records are returned?","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"map table outputs display recent record per species per voucher type. species therefore represented map table maximum 3 records (species physical voucher, photographic voucher audio voucher target area). text statement indicates total number records, downloadable CSV file contains records target area, just recent records.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"use-the-web-app","dir":"","previous_headings":"","what":"Use the web app","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"app can accessed : https://unsw.shinyapps.io/infinitylists/","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"local-installation","dir":"","previous_headings":"","what":"Local installation","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"can install run local version infinitylists GitHub. allows flexibility loading taxa automatically loaded web app, loading data regions world. code :","code":"# install.packages(\"remotes\")  remotes::install_github(\"traitecoevo/infinitylists\", build_vignettes = TRUE)  library(infinitylists)  infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"adding-new-taxa-for-australia","dir":"","previous_headings":"","what":"Adding new taxa for Australia","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"infinitylists comes seven taxa loaded start : plants, butterflies, cicadas, marsupials, dragonflies + damselflies (plus arachnids France, lizards snakes Spain). want add another taxon Australia, ’ll need download data first via galah interface ALA. function download_ala_obs download data put directory infinitylists can find . value taxon needs valid taxonomic group recognized ALA. download step fast taxa small number observations ALA slower taxa millions observations.","code":"# register with GBIF first before and include your information here galah::galah_config(atlas = \"Global\",email = \"youremail\",password=\"yourpassword\",username =\"yourusername\")  #check the size of your download first.  Some GBIF downloads may overwhelm your internet connection or storage capacity.   # this checks the approximate size of reptile downloads from Madagascar query_gbif_global(\"Reptilia\",                   min_year = 1980,                   max_year = 2024,                   country_code = \"MG\") |>    galah::atlas_counts()  # download the data, this needs to be a valid taxa name download_gbif_obs(taxon = \"Reptilia\",country_code = \"MG\")  r<-arrow::read_parquet(\"/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/infinitylists/data/Living-Atlas-Reptilia-MG-2025-03-03.parquet\")  infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Observations for Infinity List — download_ala_obs","title":"Download Observations for Infinity List — download_ala_obs","text":"function downloads observation data given taxon year range \"Infinity List\" source, processes cleans data, adds additional columns (e.g., establishment status), optionally saves raw processed data.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Observations for Infinity List — download_ala_obs","text":"","code":"download_ala_obs(   taxon,   year_range = c(1923, as.numeric(format(Sys.Date(), \"%Y\"))),   save_raw_data = FALSE,   output_dir = file.path(system.file(package = \"infinitylists\"), \"data/\") )"},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Observations for Infinity List — download_ala_obs","text":"taxon character vector string specifying taxon (e.g., species, genus) observations downloaded. year_range numeric vector length 2 indicating start end years data retrieval. Default 1923 current year save_raw_data logical value indicating whether save raw data. default, raw data saved (FALSE). output_dir character string specifying directory saved data (raw processed) stored. Default file.path(system.file(package = \"infinitylists\"), \"data/\").","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Observations for Infinity List — download_ala_obs","text":"function saves processed data returns invisibly. structure content returned value () determined functions called within (e.g., retrieve_data, process_data).","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Observations for Infinity List — download_ala_obs","text":"function carries following steps: Retrieve data \"Infinity List\" source. Process clean retrieved data remove inconsistencies. Add additional columns cleaned data, establishment status given taxon. save_raw_data TRUE, save processed data specified output_dir.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process GBIF Observations — download_gbif_obs","title":"Download and Process GBIF Observations — download_gbif_obs","text":"function retrieves, processes, saves GBIF (Global Biodiversity Information Facility) observation data specified taxon.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process GBIF Observations — download_gbif_obs","text":"","code":"download_gbif_obs(   taxon,   min_year = 1923,   max_year = as.numeric(format(Sys.Date(), \"%Y\")),   country_code = NULL,   save_raw_data = FALSE,   output_dir = file.path(system.file(package = \"infinitylists\"), \"data/\") )"},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process GBIF Observations — download_gbif_obs","text":"taxon Character. taxon (species, genus, etc.) retrieve GBIF data. min_year Numeric. minimum year observations retrieved. Default 1923. max_year Numeric. maximum year observations retrieved. Default current year. country_code Character. ISO 3166-1 alpha-2 country code filter observations country. Default NULL (country filter). save_raw_data Logical. Whether save raw data retrieved GBIF. Default FALSE. output_dir Character. directory processed data saved. Default \"data\" directory within \"infinitylists\" package.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process GBIF Observations — download_gbif_obs","text":"None. function saves processed data specified output directory.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Infinity List Server Function — infinity_server","title":"Infinity List Server Function — infinity_server","text":"Initializes sets server-side logic Infinity List Shiny application. function manages user interactions, data processing, rendering UI elements outputs (tables, maps, stats). handles file uploads, data filtering, interaction map elements.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infinity List Server Function — infinity_server","text":"","code":"infinity_server(...)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infinity List Server Function — infinity_server","text":"... Additional arguments might passed server functions. passed Shiny UI function another server function.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infinity List Server Function — infinity_server","text":"function sets returns server function Shiny app. direct return value, rather, sets reactive outputs, observers, expressions Shiny app utilize.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infinity List Server Function — infinity_server","text":"server function handles several main tasks: Observes processes KML file uploads. Reactively creates polygons based user inputs. Filters processes ALA data based user-selected polygons. Computes displays statistics observed species. Updates select input choices based available data. Renders displays data table specific details. Provides CSV download handler displayed data. Renders Leaflet map markers, polygons, buffers. Key internal functions include: load_place(): processing KML files. create_circle_polygon(): create polygons user inputs. points_in_target(): determine points lie within target polygon. points_in_buffer(): determine points lie within buffer around polygon. filter_by_taxon(): Filters ALA data selected taxa. add_buffer(): Adds buffer around given polygon.","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the Infinity List Application — infinitylistApp","title":"Launch the Infinity List Application — infinitylistApp","text":"function initializes runs \"Infinity List\" application using Shiny. launching, checks available updates downloads necessary. app provides user interface (ui) server-side logic (server) interactively work Infinity List.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the Infinity List Application — infinitylistApp","text":"","code":"infinitylistApp(...)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch the Infinity List Application — infinitylistApp","text":"... Additional arguments passed shinyApp(). can include parameters like port, launch.browser, others described documentation shinyApp().","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch the Infinity List Application — infinitylistApp","text":"function launches Shiny application return app terminated user.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch the Infinity List Application — infinitylistApp","text":"function carries following steps: Checks downloads available updates using check_and_download_update(). Initializes user interface (ui) application. Sets server-side logic (server) application. Launches Shiny application using shinyApp().","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the Infinity List Application — infinitylistApp","text":"","code":"if (FALSE) { # \\dontrun{   # Launch the Infinity List App   infinitylistApp() } # }"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylists-package.html","id":null,"dir":"Reference","previous_headings":"","what":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants — infinitylists-package","title":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants — infinitylists-package","text":"shiny-based application allows users extract plant occurrence data Atlas Living Australia generate species list defined area New South Wales. records associated either physical voucher (stored Australian herbaria) photographic voucher (stored iNaturalist) extracted. species within defined area, application return voucher type, number vouchers, date recent voucher, spatial coordinates, voucher location, voucher collector. Records displayed table map, downloadable CSV.","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylists-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants — infinitylists-package","text":"Maintainer: Thomas Mesaglio thomasmesaglio@gmail.com (ORCID) [copyright holder] Authors: Cornwell w.cornwell@unsw.edu.au (ORCID) Fonti Kar f.kar@unsw.edu.au (ORCID)","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate galah query for Global GBIF Node — query_gbif_global","title":"Generate galah query for Global GBIF Node — query_gbif_global","text":"Generate galah query Global GBIF Node","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate galah query for Global GBIF Node — query_gbif_global","text":"","code":"query_gbif_global(taxon, min_year, max_year, country_code = NULL)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate galah query for Global GBIF Node — query_gbif_global","text":"taxon character, genus/family/kingdom min_year numeric, year cut query, records year >= min_year included max_year numeric, year cut query, records year <= max_year included country_code character, code country","code":""}]
