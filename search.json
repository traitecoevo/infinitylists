[{"path":"https://traitecoevo.github.io/infinitylists/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Mesaglio. Author, maintainer, copyright holder. Cornwell. Author. Fonti Kar. Author.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mesaglio T, Cornwell W, Kar F (2025). infinitylists: Shiny-Based Application Generating Place-Based Species Lists Australian Plants. R package version 1.0.0, https://traitecoevo.github.io/infinitylists/.","code":"@Manual{,   title = {infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants},   author = {Thomas Mesaglio and Will Cornwell and Fonti Kar},   year = {2025},   note = {R package version 1.0.0},   url = {https://traitecoevo.github.io/infinitylists/}, }"},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"infinitylists-","dir":"","previous_headings":"","what":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"infinitylists Shiny-based application enables users extract species occurrence data national global databases generate species lists defined area. area can defined either via kml file circle specified latitude longitude, including one current location device.  application retrieves records species presence associated : Physical vouchers (specimens stored herbaria museums across world) Photographic vouchers (uploaded iNaturalist) Audio vouchers (uploaded iNaturalist) designed field naturalist , say Manu National Park, Peru, wants know species Morpho butterflies observed close park. answer query table form:  map form:  species selected area, app provides field-friendly formatting : - Observation type - Number observation - Date recent observation - Spatial coordinates - Voucher deposition location - Observer recent records displayed table map. observations selected area can downloaded CSV file.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"data-updates","dir":"","previous_headings":"","what":"Data Updates","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"pre-loaded dataset download corresponding timestamp releases section GitHub. Users can also retrieve --date data using code provided .","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"record-display-rules","dir":"","previous_headings":"","what":"Record Display Rules","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"map table display recent record per species per voucher type. means species may represented two records: Physical voucher Photographic/audio voucher total number records indicated text summary, downloadable CSV contains records target area, just recent ones. want observations area, just recent one species, use button.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"accessing-the-web-app","dir":"","previous_headings":"","what":"Accessing the Web App","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"can access hosted version infinitylists : ðŸ”— https://unsw.shinyapps.io/infinitylists/","code":""},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"local-installation","dir":"","previous_headings":"","what":"Local Installation","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"install run infinitylists locally GitHub, use following commands: Running application locally provides greater flexibility, allowing load taxa-country combinations may available web app retrieve data region worldwide.","code":"# install.packages(\"remotes\")  remotes::install_github(\"traitecoevo/infinitylists\", build_vignettes = TRUE)  library(infinitylists)  infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"adding-new-taxa--country-combinations","dir":"","previous_headings":"","what":"Adding New Taxa / Country Combinations","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"infinitylists includes several pre-loaded taxa-country combinations. need add new taxon-country pair, follow steps: Download data using galah R package, interfaces GBIF ALA. Use function download_gbif_obs download data store (fast access) parquet file directory infinitylists can access .","code":"# Example usage # register with GBIF first before and include your information here galah::galah_config(atlas = \"Global\",email = \"youremail\",password=\"yourpassword\",username =\"yourusername\")  #check the size of your download first.  Some GBIF downloads may overwhelm your internet connection or storage capacity.   # this checks the approximate size of reptile downloads from Madagascar.  query_gbif_global(\"Reptilia\",                   min_year = 1980,                   max_year = 2024,                   country_code = \"MG\") |>    galah::atlas_counts()   download_gbif_obs(taxon = \"Reptilia\",country_code = \"MG\")  #restart the app locally: infinitylistApp()"},{"path":"https://traitecoevo.github.io/infinitylists/index.html","id":"important-considerations","dir":"","previous_headings":"Adding New Taxa / Country Combinations","what":"Important Considerations","title":"A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants","text":"taxon argument must valid taxonomic group recognized GBIF backbone. Small taxa-country combinations download quickly, larger datasets may take longer cause connection timeouts. Ensure geographic location correctly specified data appears app. frequently asked questions tab within app","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Observations for Infinity List â€” download_ala_obs","title":"Download Observations for Infinity List â€” download_ala_obs","text":"function downloads observation data given taxon year range \"Infinity List\" source, processes cleans data, adds additional columns (e.g., establishment status), optionally saves raw processed data.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Observations for Infinity List â€” download_ala_obs","text":"","code":"download_ala_obs(   taxon,   year_range = c(1923, as.numeric(format(Sys.Date(), \"%Y\"))),   save_raw_data = FALSE,   output_dir = file.path(system.file(package = \"infinitylists\"), \"data/\") )"},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Observations for Infinity List â€” download_ala_obs","text":"taxon character vector string specifying taxon (e.g., species, genus) observations downloaded. year_range numeric vector length 2 indicating start end years data retrieval. Default 1923 current year save_raw_data logical value indicating whether save raw data. default, raw data saved (FALSE). output_dir character string specifying directory saved data (raw processed) stored. Default file.path(system.file(package = \"infinitylists\"), \"data/\").","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Observations for Infinity List â€” download_ala_obs","text":"function saves processed data returns invisibly. structure content returned value () determined functions called within (e.g., retrieve_data, process_data).","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_ala_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Observations for Infinity List â€” download_ala_obs","text":"function carries following steps: Retrieve data \"Infinity List\" source. Process clean retrieved data remove inconsistencies. Add additional columns cleaned data, establishment status given taxon. save_raw_data TRUE, save processed data specified output_dir.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process GBIF Observations â€” download_gbif_obs","title":"Download and Process GBIF Observations â€” download_gbif_obs","text":"function retrieves, processes, saves GBIF (Global Biodiversity Information Facility) observation data specified taxon.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process GBIF Observations â€” download_gbif_obs","text":"","code":"download_gbif_obs(   taxon,   min_year = 1923,   max_year = as.numeric(format(Sys.Date(), \"%Y\")),   country_code = NULL,   save_raw_data = FALSE,   output_dir = file.path(system.file(package = \"infinitylists\"), \"data/\") )"},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process GBIF Observations â€” download_gbif_obs","text":"taxon Character. taxon (species, genus, etc.) retrieve GBIF data. min_year Numeric. minimum year observations retrieved. Default 1923. max_year Numeric. maximum year observations retrieved. Default current year. country_code Character. ISO 3166-1 alpha-2 country code filter observations country. Default NULL (country filter). save_raw_data Logical. Whether save raw data retrieved GBIF. Default FALSE. output_dir Character. directory processed data saved. Default \"data\" directory within \"infinitylists\" package.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/download_gbif_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process GBIF Observations â€” download_gbif_obs","text":"None. function saves processed data specified output directory.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Infinity List Server Function â€” infinity_server","title":"Infinity List Server Function â€” infinity_server","text":"Initializes sets server-side logic Infinity List Shiny application. function manages user interactions, data processing, rendering UI elements outputs (tables, maps, stats). handles file uploads, data filtering, interaction map elements.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infinity List Server Function â€” infinity_server","text":"","code":"infinity_server(...)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infinity List Server Function â€” infinity_server","text":"... Additional arguments might passed server functions. passed Shiny UI function another server function.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infinity List Server Function â€” infinity_server","text":"function sets returns server function Shiny app. direct return value, rather, sets reactive outputs, observers, expressions Shiny app utilize.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinity_server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infinity List Server Function â€” infinity_server","text":"server function handles several main tasks: Observes processes KML file uploads. Reactively creates polygons based user inputs. Filters processes ALA data based user-selected polygons. Computes displays statistics observed species. Updates select input choices based available data. Renders displays data table specific details. Provides CSV download handler displayed data. Renders Leaflet map markers, polygons, buffers. Key internal functions include: load_place(): processing KML files. create_circle_polygon(): create polygons user inputs. points_in_target(): determine points lie within target polygon. points_in_buffer(): determine points lie within buffer around polygon. filter_by_taxon(): Filters ALA data selected taxa. add_buffer(): Adds buffer around given polygon.","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the Infinity List Application â€” infinitylistApp","title":"Launch the Infinity List Application â€” infinitylistApp","text":"function initializes runs \"Infinity List\" application using Shiny. launching, checks available updates downloads necessary. app provides user interface (ui) server-side logic (server) interactively work Infinity List.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the Infinity List Application â€” infinitylistApp","text":"","code":"infinitylistApp(...)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch the Infinity List Application â€” infinitylistApp","text":"... Additional arguments passed shinyApp(). can include parameters like port, launch.browser, others described documentation shinyApp().","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch the Infinity List Application â€” infinitylistApp","text":"function launches Shiny application return app terminated user.","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch the Infinity List Application â€” infinitylistApp","text":"function carries following steps: Checks downloads available updates using check_and_download_update(). Initializes user interface (ui) application. Sets server-side logic (server) application. Launches Shiny application using shinyApp().","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylistApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the Infinity List Application â€” infinitylistApp","text":"","code":"if (FALSE) { # \\dontrun{   # Launch the Infinity List App   infinitylistApp() } # }"},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylists-package.html","id":null,"dir":"Reference","previous_headings":"","what":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants â€” infinitylists-package","title":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants â€” infinitylists-package","text":"shiny-based application allows users extract plant occurrence data Atlas Living Australia generate species list defined area New South Wales. records associated either physical voucher (stored Australian herbaria) photographic voucher (stored iNaturalist) extracted. species within defined area, application return voucher type, number vouchers, date recent voucher, spatial coordinates, voucher location, voucher collector. Records displayed table map, downloadable CSV.","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/infinitylists/reference/infinitylists-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"infinitylists: A Shiny-Based Application for Generating Place-Based Species Lists for Australian Plants â€” infinitylists-package","text":"Maintainer: Thomas Mesaglio thomasmesaglio@gmail.com (ORCID) [copyright holder] Authors: Cornwell w.cornwell@unsw.edu.au (ORCID) Fonti Kar f.kar@unsw.edu.au (ORCID)","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate galah query for Global GBIF Node â€” query_gbif_global","title":"Generate galah query for Global GBIF Node â€” query_gbif_global","text":"Generate galah query Global GBIF Node","code":""},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate galah query for Global GBIF Node â€” query_gbif_global","text":"","code":"query_gbif_global(taxon, min_year, max_year, country_code = NULL)"},{"path":"https://traitecoevo.github.io/infinitylists/reference/query_gbif_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate galah query for Global GBIF Node â€” query_gbif_global","text":"taxon character, genus/family/kingdom min_year numeric, year cut query, records year >= min_year included max_year numeric, year cut query, records year <= max_year included country_code character, code country","code":""}]
